// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod xtotp {

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum TotpEntryOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TotpEntry<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TotpEntry<'a> {
    type Inner = TotpEntry<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table { buf, loc } }
    }
}

impl<'a> TotpEntry<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        TotpEntry { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args TotpEntryArgs<'args>) -> flatbuffers::WIPOffset<TotpEntry<'bldr>> {
      let mut builder = TotpEntryBuilder::new(_fbb);
      if let Some(x) = args.secret_hash { builder.add_secret_hash(x); }
      if let Some(x) = args.name { builder.add_name(x); }
      builder.add_step_seconds(args.step_seconds);
      builder.add_digit_count(args.digit_count);
      builder.finish()
    }

    pub const VT_NAME: flatbuffers::VOffsetT = 4;
    pub const VT_STEP_SECONDS: flatbuffers::VOffsetT = 6;
    pub const VT_SECRET_HASH: flatbuffers::VOffsetT = 8;
    pub const VT_DIGIT_COUNT: flatbuffers::VOffsetT = 10;

  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TotpEntry::VT_NAME, None)
  }
  #[inline]
  pub fn step_seconds(&self) -> u16 {
    self._tab.get::<u16>(TotpEntry::VT_STEP_SECONDS, Some(0)).unwrap()
  }
  #[inline]
  pub fn secret_hash(&self) -> Option<&'a [i8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i8>>>(TotpEntry::VT_SECRET_HASH, None).map(|v| v.safe_slice())
  }
  #[inline]
  pub fn digit_count(&self) -> u8 {
    self._tab.get::<u8>(TotpEntry::VT_DIGIT_COUNT, Some(0)).unwrap()
  }
}

impl flatbuffers::Verifiable for TotpEntry<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>(&"name", Self::VT_NAME, false)?
     .visit_field::<u16>(&"step_seconds", Self::VT_STEP_SECONDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i8>>>(&"secret_hash", Self::VT_SECRET_HASH, false)?
     .visit_field::<u8>(&"digit_count", Self::VT_DIGIT_COUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct TotpEntryArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub step_seconds: u16,
    pub secret_hash: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i8>>>,
    pub digit_count: u8,
}
impl<'a> Default for TotpEntryArgs<'a> {
    #[inline]
    fn default() -> Self {
        TotpEntryArgs {
            name: None,
            step_seconds: 0,
            secret_hash: None,
            digit_count: 0,
        }
    }
}
pub struct TotpEntryBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> TotpEntryBuilder<'a, 'b> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TotpEntry::VT_NAME, name);
  }
  #[inline]
  pub fn add_step_seconds(&mut self, step_seconds: u16) {
    self.fbb_.push_slot::<u16>(TotpEntry::VT_STEP_SECONDS, step_seconds, 0);
  }
  #[inline]
  pub fn add_secret_hash(&mut self, secret_hash: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TotpEntry::VT_SECRET_HASH, secret_hash);
  }
  #[inline]
  pub fn add_digit_count(&mut self, digit_count: u8) {
    self.fbb_.push_slot::<u8>(TotpEntry::VT_DIGIT_COUNT, digit_count, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> TotpEntryBuilder<'a, 'b> {
    let start = _fbb.start_table();
    TotpEntryBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TotpEntry<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for TotpEntry<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("TotpEntry");
      ds.field("name", &self.name());
      ds.field("step_seconds", &self.step_seconds());
      ds.field("secret_hash", &self.secret_hash());
      ds.field("digit_count", &self.digit_count());
      ds.finish()
  }
}
}  // pub mod xtotp

